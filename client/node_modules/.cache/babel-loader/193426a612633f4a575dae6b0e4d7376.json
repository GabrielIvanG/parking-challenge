{"ast":null,"code":"import axios from 'axios';\nimport { ActionTypes } from '../constants.js';\nexport const getBusiness = (location, score) => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios.get(`${process.env.REACT_APP_BACKEND_URL}parkings?location=${location}&score=${score}`);\n      let newData = data.response.parkings;\n      dispatch({\n        type: ActionTypes.GET_BUSINESS,\n        payload: newData\n      });\n    } catch (error) {\n      dispatch({\n        type: 'GET_BUSINESS_FAILURE',\n        payload: {\n          message: 'Not found'\n        }\n      });\n    }\n  };\n};\nexport const cleanError = () => {\n  return dispatch => {\n    try {\n      dispatch({\n        type: 'CLEAN_ERROR',\n        payload: ''\n      });\n    } catch (error) {\n      dispatch({\n        type: 'CLEAN_ERROR_FAIL',\n        payload: {\n          message: 'cant clean'\n        }\n      });\n    }\n  };\n};\nexport const getCoords = address => {\n  return async dispatch => {\n    try {\n      const cleanAddress = encodeURI(address[0]);\n      const {\n        data\n      } = await axios.get(`${process.env.REACT_APP_BACKEND_URL}geolocation?address=${cleanAddress}`);\n      let coords = data.response;\n      dispatch({\n        type: 'GET_COORDS',\n        payload: coords\n      });\n    } catch (error) {\n      dispatch({\n        type: 'GET_COORDS_FAIL',\n        payload: {\n          message: 'cannot get coords'\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["E:/PROGRAMACION/JS/GitHub Dest Reposito/parking-challenge/client/src/redux/actions/actions.js"],"names":["axios","ActionTypes","getBusiness","location","score","dispatch","data","get","process","env","REACT_APP_BACKEND_URL","newData","response","parkings","type","GET_BUSINESS","payload","error","message","cleanError","getCoords","address","cleanAddress","encodeURI","coords"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,iBAA1B;AAGA,OAAO,MAAMC,WAAW,GAAG,CAC1BC,QAD0B,EAE1BC,KAF0B,KAGtB;AACJ,SAAO,MAAOC,QAAP,IAAoB;AAC1B,QAAI;AACH,YAAM;AAACC,QAAAA;AAAD,UAAS,MAAMN,KAAK,CAACO,GAAN,CACnB,GAAEC,OAAO,CAACC,GAAR,CAAYC,qBAAsB,qBAAoBP,QAAS,UAASC,KAAM,EAD7D,CAArB;AAIA,UAAIO,OAAO,GAAGL,IAAI,CAACM,QAAL,CAAcC,QAA5B;AAEAR,MAAAA,QAAQ,CAAC;AACRS,QAAAA,IAAI,EAAEb,WAAW,CAACc,YADV;AAERC,QAAAA,OAAO,EAAEL;AAFD,OAAD,CAAR;AAIA,KAXD,CAWE,OAAOM,KAAP,EAAc;AACfZ,MAAAA,QAAQ,CAAC;AACRS,QAAAA,IAAI,EAAE,sBADE;AAERE,QAAAA,OAAO,EAAE;AACRE,UAAAA,OAAO,EAAE;AADD;AAFD,OAAD,CAAR;AAMA;AACD,GApBD;AAqBA,CAzBM;AA2BP,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC/B,SAAQd,QAAD,IAAc;AACpB,QAAI;AACHA,MAAAA,QAAQ,CAAC;AACRS,QAAAA,IAAI,EAAE,aADE;AAERE,QAAAA,OAAO,EAAE;AAFD,OAAD,CAAR;AAIA,KALD,CAKE,OAAOC,KAAP,EAAc;AACfZ,MAAAA,QAAQ,CAAC;AACRS,QAAAA,IAAI,EAAE,kBADE;AAERE,QAAAA,OAAO,EAAE;AACRE,UAAAA,OAAO,EAAE;AADD;AAFD,OAAD,CAAR;AAMA;AACD,GAdD;AAeA,CAhBM;AAkBP,OAAO,MAAME,SAAS,GAAKC,OAAF,IAAe;AACvC,SAAO,MAAOhB,QAAP,IAAoB;AAC1B,QAAI;AACH,YAAMiB,YAAY,GAAGC,SAAS,CAACF,OAAO,CAAC,CAAD,CAAR,CAA9B;AACA,YAAM;AAACf,QAAAA;AAAD,UAAS,MAAMN,KAAK,CAACO,GAAN,CACnB,GAAEC,OAAO,CAACC,GAAR,CAAYC,qBAAsB,uBAAsBY,YAAa,EADpD,CAArB;AAIA,UAAIE,MAAM,GAAGlB,IAAI,CAACM,QAAlB;AAEAP,MAAAA,QAAQ,CAAC;AACRS,QAAAA,IAAI,EAAE,YADE;AAERE,QAAAA,OAAO,EAAEQ;AAFD,OAAD,CAAR;AAIA,KAZD,CAYE,OAAOP,KAAP,EAAc;AACfZ,MAAAA,QAAQ,CAAC;AACRS,QAAAA,IAAI,EAAE,iBADE;AAERE,QAAAA,OAAO,EAAE;AACRE,UAAAA,OAAO,EAAE;AADD;AAFD,OAAD,CAAR;AAMA;AACD,GArBD;AAsBA,CAvBM","sourcesContent":["import axios from 'axios';\r\nimport {ActionTypes} from '../constants.js'\r\n\r\n\r\nexport const getBusiness = (\r\n\tlocation,\r\n\tscore\r\n) => {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tconst {data} = await axios.get(\r\n\t\t\t\t`${process.env.REACT_APP_BACKEND_URL}parkings?location=${location}&score=${score}`\r\n\t\t\t);\r\n\r\n\t\t\tlet newData = data.response.parkings\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ActionTypes.GET_BUSINESS,\r\n\t\t\t\tpayload: newData,\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'GET_BUSINESS_FAILURE',\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tmessage: 'Not found',\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const cleanError = () => {\r\n\treturn (dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'CLEAN_ERROR',\r\n\t\t\t\tpayload: '',\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'CLEAN_ERROR_FAIL',\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tmessage: 'cant clean',\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const getCoords = ( address ) => {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tconst cleanAddress = encodeURI(address[0])\r\n\t\t\tconst {data} = await axios.get(\r\n\t\t\t\t`${process.env.REACT_APP_BACKEND_URL}geolocation?address=${cleanAddress}`\r\n\t\t\t);\r\n\r\n\t\t\tlet coords = data.response\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'GET_COORDS',\r\n\t\t\t\tpayload: coords,\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'GET_COORDS_FAIL',\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tmessage: 'cannot get coords',\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};"]},"metadata":{},"sourceType":"module"}